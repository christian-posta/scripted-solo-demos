apiVersion: v1
binaryData:
  api-doc-spec: 
kind: ConfigMap
metadata:
  name: dev-portal-petstore-special-api-doc-spec
  namespace: dev-portal
---
apiVersion: devportal.solo.io/v1alpha1
kind: APIDoc
metadata:
  name: petstore-special
  namespace: dev-portal
spec:
  openApi:
    content:
      configMap:
        key: api-doc-spec
        name: dev-portal-petstore-special-api-doc-spec
        namespace: dev-portal
