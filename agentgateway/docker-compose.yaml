services:
  agentgateway:
    profiles: ["all", "minimal"]
    image: ghcr.io/agentgateway/agentgateway:0.10.4
    volumes:
     - ~/.aws:/root/.aws:ro  # For Bedrock
     - ./guardrail/credentials.json:/app/credentials.json
     - ./config/agentgateway_config.yaml:/app/config.yaml
     - ./resources/openapi/petstore.json:/app/openapi.json
    command:
     - "-f"
     - "/app/config.yaml"
    ports:
      - "3000:3000" 
      - "15000:15000" 
      - "15020:15020" 
    environment:
      AWS_PROFILE: "pa"   
      AWS_REGION: "us-west-2"
    env_file:
     - ./config/.env        
    healthcheck:  # Defines the health check configuration for the container
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 http://localhost:15021/healthz/ready || exit 1" ]  # Command to execute for health check
      interval: 30s  # Perform health check every 30 seconds
      timeout: 10s   # Health check command times out after 10 seconds
      retries: 3     # Retry up to 3 times if health check fails
      start_period: 40s  # Wait 40 seconds after container start before beginning health checks

  jaeger:
    profiles: ["all", "infra"]
    container_name: jaeger
    restart: unless-stopped
    image: jaegertracing/all-in-one:latest
    ports:
    - "127.0.0.1:16686:16686"
    - "127.0.0.1:14268:14268"
    - "127.0.0.1:4317:4317"
    environment:
    - COLLECTOR_OTLP_ENABLED=true

  redis:
    profiles: ["all", "minimal", "infra"]
    container_name: redis
    restart: unless-stopped
    image: redis:7.4.3
    ports:
    - "127.0.0.1:6379:6379"
    command: redis-server --appendonly yes
    volumes:
    - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  ratelimit:
    profiles: ["all", "minimal", "infra"]
    container_name: ratelimit
    restart: unless-stopped
    image: envoyproxy/ratelimit:3e085e5b
    ports:
    - "8081:8081"
    environment:
    - REDIS_URL=redis:6379
    - USE_STATSD=false
    - LOG_LEVEL=info
    - REDIS_SOCKET_TYPE=tcp
    - RUNTIME_ROOT=/data
    - RUNTIME_SUBDIRECTORY=ratelimit
    - DISABLE_STATS=true
    volumes:
    - ./config/ratelimit-config.yaml:/data/ratelimit/config/config.yaml:ro
    command: ["/bin/ratelimit", "-config", "/data/ratelimit/config/config.yaml"]
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "http://localhost:8081/healthcheck", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    profiles: ["all", "infra"]
    container_name: prometheus
    restart: unless-stopped
    image: prom/prometheus:v3.7.2
    ports:
    - "127.0.0.1:9090:9090"
    volumes:
    - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - prometheus_data:/prometheus
    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--web.console.libraries=/etc/prometheus/console_libraries'
    - '--web.console.templates=/etc/prometheus/consoles'
    - '--storage.tsdb.retention.time=200h'
    - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "http://localhost:9090/-/healthy", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    profiles: ["all", "infra"]
    container_name: grafana
    restart: unless-stopped
    image: grafana/grafana:latest
    ports:
    - "127.0.0.1:3001:3000"
    volumes:
    - grafana_data:/var/lib/grafana
    - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin
    - GF_USERS_ALLOW_SIGN_UP=false
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
  prometheus_data:
  grafana_data: