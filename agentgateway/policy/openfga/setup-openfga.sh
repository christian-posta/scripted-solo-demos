#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}=== OpenFGA Setup Script ===${NC}"

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}Error: Docker is not running. Please start Docker and try again.${NC}"
    exit 1
fi

# Start OpenFGA server
echo -e "${YELLOW}Starting OpenFGA server...${NC}"
cd "$(dirname "$0")"
docker-compose up -d

# Wait for server to be ready
echo -e "${YELLOW}Waiting for OpenFGA server to be ready...${NC}"
sleep 5

MAX_RETRIES=30
RETRY_COUNT=0
while ! curl -sf http://localhost:8181/healthz > /dev/null 2>&1; do
    RETRY_COUNT=$((RETRY_COUNT + 1))
    if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
        echo -e "${RED}Error: OpenFGA server failed to start${NC}"
        exit 1
    fi
    sleep 1
done

echo -e "${GREEN}OpenFGA server is ready!${NC}"

# Check if FGA CLI is installed
if ! command -v fga &> /dev/null; then
    echo -e "${YELLOW}FGA CLI is not installed.${NC}"
    echo "Please install it from: https://github.com/openfga/cli"
    echo ""
    echo "For macOS:"
    echo "  brew install openfga/tap/fga"
    echo ""
    echo "After installing, run this script again."
    exit 1
fi

echo -e "${YELLOW}Creating OpenFGA store...${NC}"
STORE_RESPONSE=$(fga store create --name "AI Gateway ReBAC" --api-url http://localhost:8181 2>&1)
STORE_ID=$(echo "$STORE_RESPONSE" | sed -n 's/.*"id":"\([^"]*\)".*/\1/p' | head -1)

if [ -z "$STORE_ID" ]; then
    echo -e "${RED}Error: Could not extract store ID from response:${NC}"
    echo "$STORE_RESPONSE"
    echo ""
    echo "Please run manually:"
    echo "  fga store create --name 'AI Gateway ReBAC' --api-url http://localhost:8181"
    echo "  (Copy the store ID from the output)"
    exit 1
fi

echo -e "${GREEN}Store created with ID: $STORE_ID${NC}"

echo -e "${YELLOW}Uploading authorization model...${NC}"
MODEL_PATH="$(dirname "$0")/authorization-model.json"

if [ ! -f "$MODEL_PATH" ]; then
    echo -e "${RED}Error: authorization-model.json not found at $MODEL_PATH${NC}"
    exit 1
fi

MODEL_RESPONSE=$(fga model write --store-id "$STORE_ID" --file "$MODEL_PATH" --api-url http://localhost:8181 2>&1)
MODEL_ID=$(echo "$MODEL_RESPONSE" | sed -n 's/.*"authorization_model_id":"\([^"]*\)".*/\1/p' | head -1)

if [ -z "$MODEL_ID" ]; then
    echo -e "${RED}Error: Could not extract model ID from response:${NC}"
    echo "$MODEL_RESPONSE"
    exit 1
fi

echo -e "${GREEN}Authorization model uploaded with ID: $MODEL_ID${NC}"

# Write environment variables to .env file
ENV_FILE="$(dirname "$0")/.env"
cat > "$ENV_FILE" << EOF
# OpenFGA Configuration
# Generated by setup-openfga.sh on $(date)

# OpenFGA API URL
export OPENFGA_API_URL=http://localhost:8181

# OpenFGA Store ID (required)
# Get this from: fga store list
export OPENFGA_STORE_ID=$STORE_ID

# OpenFGA Authorization Model ID (optional - uses latest if not specified)
# Get this from: fga model list --store-id=<STORE_ID>
export OPENFGA_MODEL_ID=$MODEL_ID
EOF

echo ""
echo -e "${GREEN}=== Setup Complete! ===${NC}"
echo ""
echo "Store ID: $STORE_ID"
echo "Model ID: $MODEL_ID"
echo ""
echo "Environment variables saved to: $ENV_FILE"
echo ""
echo "To run the V3 authorization tests:"
echo "  source $ENV_FILE && python test-relationships.py"
echo ""
echo "To stop the OpenFGA server:"
echo "  docker-compose down"

