{{- define "ratelimit.sidecarConfigAndRedisSecret"}}
{{- $name := (index . 1) }}
{{- with (first .) }}
{{- $rateLimitName := .Values.global.extensions.rateLimit.deployment.name }}
{{- $redisName := .Values.redis.service.name }}
{{- if .Values.global.extensions.dataplanePerProxy }}
{{- $rateLimitName = printf "%s-%s" $rateLimitName ($name | kebabcase) }}
{{- $redisName = printf "%s-%s" $redisName ($name | kebabcase) }}
{{- end }} {{/* .Values.global.extensions.dataplanePerProxy */}}

{{- if .Values.gloo.gateway.updateValues -}}
{{- include "gloo.updatevalues" . -}}
{{- end -}}
{{- $redisPassword := "" }}
{{- if and .Values.global.extensions.glooRedis.enableAcl (not .Values.redis.disabled) -}}
{{- $old_sec := lookup "v1" "Secret" .Release.Namespace "redis" }}
{{- if not $old_sec.data }}
{{- $redisPassword = randAlphaNum 64 }}
{{- else }}
{{- $redisPassword = index $old_sec.data "redis-password" | b64dec }}
{{- end }}{{/* not $old_sec.data */}}
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: gloo
    gloo: {{ $redisName }}
  name: {{ $redisName }}
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  users.acl: {{ list .Values.redis.aclPrefix $redisPassword | join "" | b64enc }}
  redis-password: {{ $redisPassword | b64enc }}
{{- end }}{{/* and .Values.global.extensions.glooRedis.enableAcl (not .Values.redis.disabled) */}}
---
{{- if or .Values.global.glooMtls.enabled (and .Values.redis.clientSideShardingEnabled (not .Values.redis.disabled) ) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $rateLimitName }}-sidecar-config
  namespace: {{ .Release.Namespace }}
  labels:
    app: gloo
    gloo: {{ $rateLimitName }}
data:
  envoy-sidecar.yaml: |
    node:
      id: sds_client
      cluster: sds_client
    static_resources:
      listeners:
      {{- if .Values.global.glooMtls.enabled }}
      {{- include "gloo.sidecarlisteners" . | nindent 6 }}
      {{- end }}
      {{- if and .Values.redis.clientSideShardingEnabled (not .Values.redis.disabled) }}
      - name: redis_listener
        address:
          pipe:
            path: /var/run/envoy/ratelimit.sock
        filter_chains:
        - filters:
          - name: envoy.filters.network.redis_proxy
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.redis_proxy.v3.RedisProxy
              stat_prefix: ratelimit_redis
              settings:
                op_timeout: 5s
              prefix_routes:
                catch_all_route:
                  cluster: redis_cluster
              {{- if .Values.global.extensions.glooRedis.enableAcl }}
              downstream_auth_password:
                inline_string: {{ $redisPassword }}
              {{- end }}
      {{- end }}{{/* and $.Values.redis.clientSideShardingEnabled (not .Values.redis.disabled) */}}
      clusters:
      {{- if and .Values.redis.clientSideShardingEnabled (not .Values.redis.disabled) }}
      - name: redis_cluster
        connect_timeout: 1s
        type: STRICT_DNS
        lb_policy: MAGLEV
        outlier_detection:
          consecutive_5xx: 10
        health_checks:
        - timeout: 1s
          interval: 1s
          no_traffic_interval: 5s
          interval_jitter: 1s
          unhealthy_threshold: 1
          healthy_threshold: 1
          custom_health_check:
            name: envoy.health_checkers.redis
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.health_checkers.redis.v3.Redis
        load_assignment:
          cluster_name: redis_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ $redisName }}
                    port_value: 6379
        {{- if .Values.global.extensions.glooRedis.enableAcl }}
        typed_extension_protocol_options:
          envoy.filters.network.redis_proxy:
            "@type": type.googleapis.com/google.protobuf.Struct
            value:
              auth_password:
                inline_string: {{ $redisPassword }}
        {{- end }}
      {{- end }}{{/* and $.Values.redis.clientSideShardingEnabled (not .Values.redis.disabled) */}}
      {{- if .Values.global.glooMtls.enabled }}
      - name: gloo_client_sds
        connect_timeout: 0.25s
        http2_protocol_options: {}
        load_assignment:
          cluster_name: gloo_client_sds
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8234
      - name: gloo.{{ .Release.Namespace }}.svc.{{ .Values.gloo.k8s.clusterName }}:{{ .Values.global.extensions.rateLimit.deployment.glooPort }}
        alt_stat_name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: gloo.{{ .Release.Namespace }}.svc.{{ .Values.gloo.k8s.clusterName }}:{{ .Values.global.extensions.rateLimit.deployment.glooPort }}
          endpoints:
            - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: {{ .Values.global.extensions.rateLimit.deployment.glooAddress }}
                        port_value: {{ .Values.global.extensions.rateLimit.deployment.glooPort }}
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificate_sds_secret_configs:
                - name: server_cert
                  sds_config:
                    resource_api_version: V3
                    api_config_source:
                      api_type: GRPC
                      transport_api_version: V3
                      grpc_services:
                        - envoy_grpc:
                            cluster_name: gloo_client_sds
              validation_context_sds_secret_config:
                name: validation_context
                sds_config:
                  resource_api_version: V3
                  api_config_source:
                    api_type: GRPC
                    transport_api_version: V3
                    grpc_services:
                      - envoy_grpc:
                          cluster_name: gloo_client_sds
      {{- end }}
    admin:
      access_log_path: "/dev/null"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001
---
{{- end }}

{{- end }}{{/* with (first .) */}}
{{- end }}{{/* define "ratelimit.sidecarConfigAndRedisSecret" */}}

{{/* client side sharding cannot be enabled with redis disabled as long as the address is redis */}}
{{- if and .Values.redis.clientSideShardingEnabled .Values.redis.disabled }}
  {{- fail "Cannot set both redis.clientSideShardingEnabled and redis.disabled" }}
{{- end }}

{{/* dataplane per proxy cannot be enabled with redis disabled because only one external redis is supported at a time */}}
{{- if and .Values.global.extensions.dataplanePerProxy .Values.redis.disabled }}
  {{- fail "Cannot set both global.extensions.dataplanePerProxy and redis.disabled" }}
{{- end }}

{{- if and .Values.global.extensions.rateLimit.enabled (not .Values.redis.disabled) }}
{{- include "gloo.dataplaneperproxyhelper" $ }}
{{- $override := dict -}}
{{- range $name, $spec := $.ProxiesToCreateDataplaneFor }}
{{- if not $spec.disabled}}
{{- $ctx := (list $ $name $spec)}}
{{- include "gloo.util.merge" (list $ctx $override "ratelimit.sidecarConfigAndRedisSecret") -}}
{{- end }}{{/* if not $spec.disabled */}}
{{- end }}{{/* range $name, $spec := $.ProxiesToCreateDataplaneFor */}}
{{- end }}{{/* and .Values.global.extensions.rateLimit.enabled (not .Values.redis.disabled) */}}